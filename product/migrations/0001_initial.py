# Generated by Django 5.0.3 on 2024-03-13 05:31

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Название')),
                ('image', models.ImageField(upload_to='banners/', verbose_name='Фото')),
                ('banner_type', models.CharField(choices=[('MAIN', 'MAIN'), ('SECONDARY', 'SECONDARY'), ('OTHER', 'OTHER')], default='MAIN', max_length=16)),
            ],
            options={
                'verbose_name': 'Баннер',
                'verbose_name_plural': 'Баннеры',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_tm', models.CharField(max_length=32, verbose_name='Название (tm)')),
                ('title_ru', models.CharField(max_length=32, verbose_name='Название (ru)')),
                ('is_set', models.BooleanField(default=False, verbose_name='Комплект?')),
                ('icon', models.ImageField(upload_to='icons/')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Info',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Название')),
                ('mobile', models.CharField(max_length=16, verbose_name='Мобильный')),
                ('email', models.CharField(max_length=64, verbose_name='Почта')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес')),
            ],
            options={
                'verbose_name': 'Инфо',
                'verbose_name_plural': 'Инфо',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен?')),
                ('title_tm', models.CharField(max_length=32, verbose_name='Название (tm)')),
                ('title_ru', models.CharField(blank=True, max_length=32, null=True, verbose_name='Название (ru)')),
                ('description_tm', models.TextField(blank=True, null=True, verbose_name='Описание (tm)')),
                ('description_ru', models.TextField(blank=True, null=True, verbose_name='Описание (ru)')),
                ('image1', models.ImageField(blank=True, null=True, upload_to='product/', verbose_name='Фото 1')),
                ('image2', models.ImageField(blank=True, null=True, upload_to='product/', verbose_name='Фото 2')),
                ('image3', models.ImageField(blank=True, null=True, upload_to='product/', verbose_name='Фото 3')),
                ('image4', models.ImageField(blank=True, null=True, upload_to='product/', verbose_name='Фото 4')),
                ('image5', models.ImageField(blank=True, null=True, upload_to='product/', verbose_name='Фото 5')),
                ('image6', models.ImageField(blank=True, null=True, upload_to='product/', verbose_name='Фото 6')),
                ('like_count', models.IntegerField(default=0, verbose_name='Количество лайков')),
                ('purchase_count', models.IntegerField(default=0, verbose_name='Количество покупок')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_product', to='product.category', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Продукт',
                'verbose_name_plural': 'Продукты',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qty', models.IntegerField(default=1, verbose_name='Количество')),
                ('purchase_point', models.IntegerField(default=0, verbose_name='Балл на покупку')),
                ('referer_point', models.IntegerField(default=0, verbose_name='Балл для реферала')),
                ('price', models.FloatField(default=0, verbose_name='Цена')),
                ('point_equivalent', models.IntegerField(default=-1, verbose_name='Эквалент баллами')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_orderitem', to='product.product', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Продукт Заказа',
                'verbose_name_plural': 'Прдукты Заказов',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='groups/', verbose_name='Фото')),
                ('title_tm', models.CharField(max_length=32, verbose_name='Название (tm)')),
                ('title_ru', models.CharField(blank=True, max_length=32, null=True, verbose_name='Название (ru)')),
                ('description_tm', models.TextField(blank=True, null=True, verbose_name='Описание (tm)')),
                ('description_ru', models.TextField(blank=True, null=True, verbose_name='Описание (ru)')),
                ('purchase_count', models.IntegerField(default=0, verbose_name='Количество покупок')),
                ('purchase_point', models.IntegerField(default=0, verbose_name='Балл на покупку')),
                ('referer_point', models.IntegerField(default=0, verbose_name='Балл для реферала')),
                ('total_price', models.FloatField(default=0, verbose_name='Цена')),
                ('point_equivalent', models.IntegerField(default=0, verbose_name='Эквалент баллами')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ManyToManyField(related_name='product_group', to='product.product', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Комбо',
                'verbose_name_plural': 'Комбо',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductSizePrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField(default=0, verbose_name='Цена')),
                ('size', models.CharField(blank=True, max_length=32, null=True, verbose_name='Размер')),
                ('purchase_count', models.IntegerField(default=0, verbose_name='Количество покупок')),
                ('purchase_point', models.IntegerField(default=0, verbose_name='Балл на покупку')),
                ('referer_point', models.IntegerField(default=0, verbose_name='Балл для реферала')),
                ('point_equivalent', models.IntegerField(default=0, verbose_name='Эквалент баллами')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_psp', to='product.product', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Продукт Цена',
                'verbose_name_plural': 'Продукты Цены',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('ORDERPLACED', 'ORDERPLACED'), ('ACCEPTED', 'ACCEPTED'), ('DELIVERED', 'DELIVERED'), ('PAID', 'PAID'), ('NOTPAID', 'NOTPAID')], max_length=16, verbose_name='Статус заказа')),
                ('purchase_point', models.IntegerField(default=0, verbose_name='Балл на покупку')),
                ('referer_point', models.IntegerField(default=0, verbose_name='Балл для реферала')),
                ('total_price', models.FloatField(default=0, verbose_name='Цена')),
                ('delivery_price', models.FloatField(default=0, verbose_name='Цена доставки')),
                ('with_point', models.BooleanField(default=False, verbose_name='Оплата баллами?')),
                ('point_equivalent', models.IntegerField(default=-1, verbose_name='Эквалент баллами')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_order', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['created_at'], name='product_ord_created_b2f489_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['updated_at'], name='product_pro_updated_e3e110_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['updated_at'], name='product_gro_updated_27c747_idx'),
        ),
    ]
